** Standard NumPy data types ** 
''' NumPy is built in C, the types will be familiar 
to users of C '''

bool_
Boolean (True or False) stored as a byte
int_
Default integer type (same as ( long; normally either int64 or int32)
intc
Identical to C int (normally int32 or int64)
intp
Integer used for indexing (same as (size_t; normally either int32 or int64)
int8
Byte (-128 to 127)
int16
Integer (-32768 to 32767)
int32
Integer (-2147483648 to 2147483647)
int64
Integer (-9223372036854775808 to 9223372036854775807)
uint8
Unsigned integer (0 to 255)
uint16
Unsigned integer (0 to 65535)
uint32
Unsigned integer (0 to 4294967295)
uint64
Unsigned integer (0 to 18446744073709551615)
float_
Shorthand for float64
float16
Half-precision float: sign bit, 5 bits exponent, 10 bits mantissa
float32
Single-precision float: sign bit, 8 bits exponent, 23 bits mantissa
float64
Double-precision float: sign bit, 11 bits exponent, 52 bits mantissa
complex_
Shorthand for complex128
complex64
Complex number, represented by two 32-bit floats
complex128 
Complex number, represented by two 64-bit floats

----------

** Arithmetic operators implemented in NumPy **

+np.add
Addition (e.g., 1 + 1 = 2)

-np. subtract
Subtraction (e.g., 3 - 2 = 1)

-np.negative
Unary negation (e.g., - 2)

*np.multiply
Multiplication (e.g., 2 * 3 = 6)

/ np.divide
Division (e.g., 3 / 2 = 1.5)

// np. floor_divide 
Floor division (e.g., 3 / / 2 = 1)

** np. power
Exponentiation (e.g., 2 ** 3 = 8)

% np.mod
Modulus/remainder (e.g., 9 % 4 = 1)

---------------

** Other Aggregation Functions **

np.sum : np. nansum : Compute sum of elements

np.prod : np. nanprod : Compute product of elements

np.mean : np. nanmean : Compute mean of elements

np.std : np. nanstd : Compute standard deviation

np. var : np. nanvar : Compute variance

np.min : np. nanmin : Find minimum value

пр.max : пр. nanmax : Find maximum value

np. argmin : np. nanargmin : Find index of minimum value

пр. argmax : np. nanargmax : Find index of maximum value

np.median : np. nanmedian : Compute median of elements

np.percentile : np.nanpercentile :  Compute rank-based statistics of elements

np. any : N/A : Evaluate whether any elements are true

np.all : N/A : Evaluate whether all elements are true

------------------------

Rules of Broadcasting

Broadcasting in NumPy follows a strict set of rules to determine the interaction between the two arrays:

Rule 1
If the two arrays differ in their number of dimensions, the shape of the one with fewer dimensions is padded with ones on its leading (left) side.

Rule 2
If the shape of the two arrays does not match in any dimension, the array with shape equal to 1 in that dimension is stretched to match the other shape.

Rule 3
If in any dimension the sizes disagree and neither is equal to 1, an error is raised.